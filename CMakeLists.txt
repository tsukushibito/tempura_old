cmake_minimum_required(VERSION 3.0)

function(assign_source_group)
    foreach(_source IN ITEMS ${ARGN})
        if (IS_ABSOLUTE ${_source})
            file(RELATIVE_PATH _source_rel ${CMAKE_CURRENT_SOURCE_DIR} ${_source})
        else()
            set(_source_rel "${_source}")
        endif()
        get_filename_component(_source_path ${_source_rel} PATH)
        string(REPLACE "/" "\\" _source_path_proj "${_source_path}")
        source_group(${_source_path_proj} FILES ${_source})
    endforeach()
endfunction(assign_source_group)

project(tempura)
file(GLOB_RECURSE cpp RELATIVE ${PROJECT_SOURCE_DIR} source/*.cpp)
file(GLOB_RECURSE h RELATIVE ${PROJECT_SOURCE_DIR} source/*.h)
file(GLOB_RECURSE mm RELATIVE ${PROJECT_SOURCE_DIR} source/*.mm)
if(APPLE)
    find_library( COCOA_LIBRARY Cocoa )
    find_library( OpenGL_LIBRARY OpenGL )
    find_library( IOKIT_LIBRARY IOKit )
    find_library( COREVIDEO_LIBRARY CoreVideo )
    set(EXTRA_LIBS ${COCOA_LIBRARY} ${OpenGL_LIBRARY} ${IOKIT_LIBRARY} ${COREVIDEO_LIBRARY})
    set(source_list ${cpp} ${h} ${mm})
    add_definitions("-Wall -std=c++11")
elseif(WIN32)
    set(source_list ${cpp} ${h})
    add_definitions("-W4")
    set(EXTRA_LIBS "OpenGL32.lib")
endif(APPLE)

include_directories(${PROJECT_SOURCE_DIR}/source)
include_directories(${PROJECT_SOURCE_DIR}/third_party/spdlog/include)
include_directories(${PROJECT_SOURCE_DIR}/third_party/opengl)
add_library(engine STATIC ${source_list})
add_executable(test_proj ${PROJECT_SOURCE_DIR}/test/main.cpp)
add_dependencies(test_proj engine)
target_link_libraries(test_proj ${EXTRA_LIBS})
target_link_libraries(test_proj engine)
assign_source_group(${source_list})
