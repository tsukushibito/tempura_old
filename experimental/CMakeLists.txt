cmake_minimum_required(VERSION 3.0)

function(assign_source_group)
    foreach(_source IN ITEMS ${ARGN})
        if (IS_ABSOLUTE ${_source})
            file(RELATIVE_PATH _source_rel ${CMAKE_CURRENT_SOURCE_DIR} ${_source})
        else()
            set(_source_rel "${_source}")
        endif()
        get_filename_component(_source_path ${_source_rel} PATH)
        string(REPLACE "/" "\\" _source_path_proj "${_source_path}")
        source_group(${_source_path_proj} FILES ${_source})
    endforeach()
endfunction(assign_source_group)

project(tempura)
file(GLOB_RECURSE engine_cpp RELATIVE ${PROJECT_SOURCE_DIR} engine/*.cpp)
file(GLOB_RECURSE engine_h RELATIVE ${PROJECT_SOURCE_DIR} engine/*.h)
file(GLOB_RECURSE engine_mm RELATIVE ${PROJECT_SOURCE_DIR} engine/*.mm)
file(GLOB_RECURSE application_cpp RELATIVE ${PROJECT_SOURCE_DIR} application/*.cpp)
file(GLOB_RECURSE application_h RELATIVE ${PROJECT_SOURCE_DIR} application/*.h)
file(GLOB_RECURSE application_mm RELATIVE ${PROJECT_SOURCE_DIR} application/*.mm)
if(APPLE)
    find_library( COCOA_LIBRARY Cocoa )
    find_library( OpenGL_LIBRARY OpenGL )
    find_library( IOKIT_LIBRARY IOKit )
    find_library( COREVIDEO_LIBRARY CoreVideo )
    set(EXTRA_LIBS ${COCOA_LIBRARY} ${OpenGL_LIBRARY} ${IOKIT_LIBRARY} ${COREVIDEO_LIBRARY})
    set(engine_source_list ${engine_cpp} ${engine_h} ${engine_mm})
    set(application_source_list ${application_cpp} ${application_h} ${application_mm})
    add_definitions("-Wall -std=c++11")
elseif(WIN32)
    set(engine_source_list ${engine_cpp} ${engine_h})
    set(application_source_list ${application_cpp} ${application_h})
    add_definitions("-W4")
    set(EXTRA_LIBS "OpenGL32.lib")
endif(APPLE)

add_library(engine SHARED ${engine_source_list})
set_target_properties(engine PROPERTIES INTERFACE_INCLUDE_DIRECTORIES ${PROJECT_SOURCE_DIR}/engine)
target_include_directories(engine PRIVATE ${PROJECT_SOURCE_DIR}/engine)
target_include_directories(engine PRIVATE ${PROJECT_SOURCE_DIR}/third_party/opengl)

add_executable(application ${application_source_list})
target_include_directories(application PRIVATE ${PROJECT_SOURCE_DIR}/application)
add_dependencies(application engine)
target_link_libraries(application ${EXTRA_LIBS})
target_link_libraries(application engine)

set(TEMP_USE_BOOST ON CACHE BOOL "To use filesystem in a environment before c++17.")
if(TEMP_USE_BOOST)
find_package(Boost COMPONENTS system filesystem) 
    if(Boost_FOUND)
        include_directories(${Boost_INCLUDE_DIRS}) 
        target_link_libraries(application ${Boost_LIBRARIES})
        add_definitions("-DTEMP_USE_BOOST")
    endif()
endif(TEMP_USE_BOOST)

assign_source_group(${engine_source_list})
assign_source_group(${application_source_list})