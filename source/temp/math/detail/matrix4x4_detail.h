#pragma once
#include "temp/math/matrix4x4.h"
namespace temp {
namespace math {
inline Float32 Matrix4x4::determinant() const {
  auto&& self = *this;
  Float32 d;
  d = self(0, 0) * self(1, 1) * self(2, 2) * self(3, 3) +  //
      self(0, 0) * self(1, 2) * self(2, 3) * self(3, 1) +  //
      self(0, 0) * self(1, 3) * self(2, 1) * self(3, 2) -  //

      self(0, 0) * self(1, 3) * self(2, 2) * self(3, 1) -  //
      self(0, 0) * self(1, 2) * self(2, 1) * self(3, 3) -  //
      self(0, 0) * self(1, 1) * self(2, 3) * self(3, 2) -  //

      self(0, 1) * self(1, 0) * self(2, 2) * self(3, 3) -  //
      self(0, 2) * self(1, 0) * self(2, 3) * self(3, 1) -  //
      self(0, 3) * self(1, 0) * self(2, 1) * self(3, 2) +  //

      self(0, 3) * self(1, 0) * self(2, 2) * self(3, 1) +  //
      self(0, 2) * self(1, 0) * self(2, 1) * self(3, 3) +  //
      self(0, 1) * self(1, 0) * self(2, 3) * self(3, 2) +  //

      self(0, 1) * self(1, 2) * self(2, 0) * self(3, 3) +  //
      self(0, 2) * self(1, 3) * self(2, 0) * self(3, 1) +  //
      self(0, 3) * self(1, 1) * self(2, 0) * self(3, 2) -  //

      self(0, 3) * self(1, 2) * self(2, 0) * self(3, 1) -  //
      self(0, 2) * self(1, 1) * self(2, 0) * self(3, 3) -  //
      self(0, 1) * self(1, 3) * self(2, 0) * self(3, 2) -  //

      self(0, 1) * self(1, 2) * self(2, 3) * self(3, 0) -  //
      self(0, 2) * self(1, 3) * self(2, 1) * self(3, 0) -  //
      self(0, 3) * self(1, 1) * self(2, 2) * self(3, 0) +  //

      self(0, 3) * self(1, 2) * self(2, 1) * self(3, 0) +  //
      self(0, 2) * self(1, 1) * self(2, 3) * self(3, 0) +  //
      self(0, 1) * self(1, 3) * self(2, 2) * self(3, 0);   //
  return d;
}

inline Matrix4x4 Matrix4x4::inversed() const {
  auto d = determinant();
  auto&& m = *this;

  auto _00 = (+m(1, 1) * m(2, 2) * m(3, 3)    //
              + m(1, 2) * m(2, 3) * m(3, 1)   //
              + m(1, 3) * m(2, 1) * m(3, 2)   //
              - m(1, 3) * m(2, 2) * m(3, 1)   //
              - m(1, 2) * m(2, 1) * m(3, 3)   //
              - m(1, 1) * m(2, 3) * m(3, 2))  //
             / d;

  auto _01 = (-m(0, 1) * m(2, 2) * m(3, 3)    //
              - m(0, 2) * m(2, 3) * m(3, 1)   //
              - m(0, 3) * m(2, 1) * m(3, 2)   //
              + m(0, 3) * m(2, 2) * m(3, 1)   //
              + m(0, 2) * m(2, 1) * m(3, 3)   //
              + m(0, 1) * m(2, 3) * m(3, 2))  //
             / d;

  auto _02 = (+m(0, 1) * m(1, 2) * m(3, 3)    //
              + m(0, 2) * m(1, 3) * m(3, 1)   //
              + m(0, 3) * m(1, 1) * m(3, 2)   //
              - m(0, 3) * m(1, 2) * m(3, 1)   //
              - m(0, 2) * m(1, 1) * m(3, 3)   //
              - m(0, 1) * m(1, 3) * m(3, 2))  //
             / d;

  auto _03 = (-m(0, 1) * m(1, 2) * m(2, 3)    //
              - m(0, 2) * m(1, 3) * m(2, 1)   //
              - m(0, 3) * m(1, 1) * m(2, 2)   //
              + m(0, 3) * m(1, 2) * m(2, 1)   //
              + m(0, 2) * m(1, 1) * m(2, 3)   //
              + m(0, 1) * m(1, 3) * m(2, 2))  //
             / d;

  auto _10 = (-m(1, 0) * m(2, 2) * m(3, 3)    //
              - m(1, 2) * m(2, 3) * m(3, 0)   //
              - m(1, 3) * m(2, 0) * m(3, 2)   //
              + m(1, 3) * m(2, 2) * m(3, 0)   //
              + m(1, 2) * m(2, 0) * m(3, 3)   //
              + m(1, 0) * m(2, 3) * m(3, 2))  //
             / d;

  auto _11 = (+m(0, 0) * m(2, 2) * m(3, 3)    //
              + m(0, 2) * m(2, 3) * m(3, 0)   //
              + m(0, 3) * m(2, 0) * m(3, 2)   //
              - m(0, 3) * m(2, 2) * m(3, 0)   //
              - m(0, 2) * m(2, 0) * m(3, 3)   //
              - m(0, 0) * m(2, 3) * m(3, 2))  //
             / d;

  auto _12 = (-m(0, 0) * m(1, 2) * m(3, 3)    //
              - m(0, 2) * m(1, 3) * m(3, 0)   //
              - m(0, 3) * m(1, 0) * m(3, 2)   //
              + m(0, 3) * m(1, 2) * m(3, 0)   //
              + m(0, 2) * m(1, 0) * m(3, 3)   //
              + m(0, 0) * m(1, 3) * m(3, 2))  //
             / d;

  auto _13 = (+m(0, 0) * m(1, 2) * m(2, 3)    //
              + m(0, 2) * m(1, 3) * m(2, 0)   //
              + m(0, 3) * m(1, 0) * m(2, 2)   //
              - m(0, 3) * m(1, 2) * m(2, 0)   //
              - m(0, 2) * m(1, 0) * m(2, 3)   //
              - m(0, 0) * m(1, 3) * m(2, 2))  //
             / d;

  auto _20 = (+m(1, 0) * m(2, 1) * m(3, 3)    //
              + m(1, 1) * m(2, 3) * m(3, 0)   //
              + m(1, 3) * m(2, 0) * m(3, 1)   //
              - m(1, 3) * m(2, 1) * m(3, 0)   //
              - m(1, 1) * m(2, 0) * m(3, 3)   //
              - m(1, 0) * m(2, 3) * m(3, 1))  //
             / d;

  auto _21 = (-m(0, 0) * m(2, 1) * m(3, 3)    //
              - m(0, 1) * m(2, 3) * m(3, 0)   //
              - m(0, 3) * m(2, 0) * m(3, 1)   //
              + m(0, 3) * m(2, 1) * m(3, 0)   //
              + m(0, 1) * m(2, 0) * m(3, 3)   //
              + m(0, 0) * m(2, 3) * m(3, 1))  //
             / d;

  auto _22 = (+m(0, 0) * m(1, 1) * m(3, 3)    //
              + m(0, 1) * m(1, 3) * m(3, 0)   //
              + m(0, 3) * m(1, 0) * m(3, 1)   //
              - m(0, 3) * m(1, 1) * m(3, 0)   //
              - m(0, 1) * m(1, 0) * m(3, 3)   //
              - m(0, 0) * m(1, 3) * m(3, 1))  //
             / d;

  auto _23 = (-m(0, 0) * m(1, 1) * m(2, 3)    //
              - m(0, 1) * m(1, 3) * m(2, 0)   //
              - m(0, 3) * m(1, 0) * m(2, 1)   //
              + m(0, 3) * m(1, 1) * m(2, 0)   //
              + m(0, 1) * m(1, 0) * m(2, 3)   //
              + m(0, 0) * m(1, 3) * m(2, 1))  //
             / d;

  auto _30 = (-m(1, 0) * m(2, 1) * m(3, 2)    //
              - m(1, 1) * m(2, 2) * m(3, 0)   //
              - m(1, 2) * m(2, 0) * m(3, 1)   //
              + m(1, 2) * m(2, 1) * m(3, 0)   //
              + m(1, 1) * m(2, 0) * m(3, 2)   //
              + m(1, 0) * m(2, 2) * m(3, 1))  //
             / d;

  auto _31 = (+m(0, 0) * m(2, 1) * m(3, 2)    //
              + m(0, 1) * m(2, 2) * m(3, 0)   //
              + m(0, 2) * m(2, 0) * m(3, 1)   //
              - m(0, 2) * m(2, 1) * m(3, 0)   //
              - m(0, 1) * m(2, 0) * m(3, 2)   //
              - m(0, 0) * m(2, 2) * m(3, 1))  //
             / d;

  auto _32 = (-m(0, 0) * m(1, 1) * m(3, 2)    //
              - m(0, 1) * m(1, 2) * m(3, 0)   //
              - m(0, 2) * m(1, 0) * m(3, 1)   //
              + m(0, 2) * m(1, 1) * m(3, 0)   //
              + m(0, 1) * m(1, 0) * m(3, 2)   //
              + m(0, 0) * m(1, 2) * m(3, 1))  //
             / d;

  auto _33 = (+m(0, 0) * m(1, 1) * m(2, 2)    //
              + m(0, 1) * m(1, 2) * m(2, 0)   //
              + m(0, 2) * m(1, 0) * m(2, 1)   //
              - m(0, 2) * m(1, 1) * m(2, 0)   //
              - m(0, 1) * m(1, 0) * m(2, 2)   //
              - m(0, 0) * m(1, 2) * m(2, 1))  //
             / d;

  return Matrix4x4(_00, _01, _02, _03,  //
                   _10, _11, _12, _13,  //
                   _20, _21, _22, _23,  //
                   _30, _31, _32, _33);
}
}  // namespace math
}  // namespace temp
